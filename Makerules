# included from Makefile
# rules for compiling

DIRS = $(shell find src/ -type d)    # all folders
SRCS = $(shell find src/ -name \*.c) # c sources
OBJS = $(SRCS:src/%.c=obj/%.o)       # object files
DEPS = $(SRCS:src/%.c=obj/%.d)       # makefile dependency files

ASSETS  = $(shell find src/ -name \*.asset) # asset files that should be embedded at compile time
ASSETSH = $(addsuffix .h,$(ASSETS))         # asset headers

GENER = $(shell find src/ -name \*.gen.py) # the code generators
GEN   = $(GENER:%.gen.py=%.gen.h)          # the generated code

X_DEPS = $(SRCS:src/%.c=xobj/%.d) # cross compile makefile dependency files
X_OBJS = $(SRCS:src/%.c=xobj/%.o) # cross compile object files

CFLAGS += $(addprefix -I,$(DIRS)) # Include all source directories so we don't have to use relative paths in includes


# asset embedding
$(ASSETSH): src/%.asset.h: src/%.asset
	@mkdir -p -- $(dir $@)
	@echo -e "EM\t$(notdir $@)"
	@./biem $<

# code generation
$(GEN): src/%.gen.h: src/%.gen.py
	@echo -e "GEN\t$@"
	@python $< > $@

# object building rule
$(OBJS): obj/%.o: src/%.c $(ASSETSH) $(GEN)
	@mkdir -p -- $(dir $@)
	@echo -e "CC\t$(notdir $@)"
	@$(CC) $(CFLAGS) -DLINUX -MD -o $@ -c $<

# executable linking rule
$(TARGET): $(LIBS) $(OBJS)
	@mkdir -p -- $(dir $@)
	@echo -e "LD\t$(notdir $@)"
	@$(CC) $(CFLAGS) -o $@ $(OBJS) $(LDLIBS) $(LDFLAGS)


# cross compile object building
$(X_OBJS): xobj/%.o: src/%.c $(ASSETSH) $(GEN)
	@mkdir -p -- $(dir $@)
	@echo -e "xCC\t$(notdir $@)"
	@$(X_CC) $(X_CFLAGS) -DWINDOWS -MD -o $@ -c $<

# cross compile exe linking
$(X_TARGET): $(X_LIBS) $(X_OBJS)
	@mkdir -p -- $(dir $@)
	@echo -e "xLD\t$(notdir $@)"
	@$(X_CC) $(X_CFLAGS) -o $@ $(X_OBJS) $(X_LDLIBS) $(X_LDFLAGS)


clean::
	$(RM) -r obj/ xobj/
	$(RM) $(ASSETSH)
	$(RM) $(GEN)

-include $(DEPS) $(X_DEPS)

